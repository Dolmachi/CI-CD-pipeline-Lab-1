import configparser
import os
import pandas as pd
import pickle
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import OrdinalEncoder, MinMaxScaler
from sklearn.metrics import r2_score
import sys
import traceback

from logger import Logger

SHOW_LOG = True


class ForestModel():
    def __init__(self) -> None:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –ª–æ–≥–µ—Ä–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞,
        # –∏ —Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        logger = Logger(SHOW_LOG)
        self.config = configparser.ConfigParser()
        self.log = logger.get_logger(__name__)
        self.config.read("config.ini")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            self.X_train = pd.read_csv(self.config["SPLIT_DATA"]["X_train"], index_col=0)
            self.y_train = pd.read_csv(self.config["SPLIT_DATA"]["y_train"], index_col=0)
            self.X_test = pd.read_csv(self.config["SPLIT_DATA"]["X_test"], index_col=0)
            self.y_test = pd.read_csv(self.config["SPLIT_DATA"]["y_test"], index_col=0)
            self.log.info("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except FileNotFoundError:
            self.log.error(traceback.format_exc())
            sys.exit(1)
        
        try:    
            # –ö–æ–¥–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            ordinal_encoder = OrdinalEncoder()
            ordinal_columns = ["Doors", "Year", "Owner_Count"]
            self.X_train[ordinal_columns] = ordinal_encoder.fit_transform(self.X_train[ordinal_columns])
            self.X_test[ordinal_columns] = ordinal_encoder.transform(self.X_test[ordinal_columns])
                
            # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            categorical_columns = ["Brand", "Model", "Fuel_Type", "Transmission"]
            self.X_train = pd.get_dummies(self.X_train, columns=categorical_columns, drop_first=True, dtype="int")
            self.X_test = pd.get_dummies(self.X_test, columns=categorical_columns, drop_first=True, dtype="int")
                
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            num_columns = ["Engine_Size", "Mileage"]
            self.scaler = MinMaxScaler()
            self.X_train[num_columns] = self.scaler.fit_transform(self.X_train[num_columns])
            self.X_test[num_columns] = self.scaler.transform(self.X_test[num_columns])
            
            self.log.info("–î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –ø–æ–¥–∞—á–∏ –≤ –º–æ–¥–µ–ª—å")                    
        except Exception:
            self.log.error('–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∞—á–∏ –≤ –º–æ–¥–µ–ª—å')
            self.log.error(traceback.format_exc())
            sys.exit(1)

        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç–∏
        self.project_path = os.path.join(os.getcwd(), "experiments")
        self.rand_forest_path = os.path.join(self.project_path, "rand_forest.sav")

        self.log.info("–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞!")

    def train_forest(self, use_config: bool, n_trees=500, criterion="poisson", max_depth=20, min_samples_leaf=2, predict=False) -> bool:
        """
            –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ RandomForestRagressor
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if use_config:
            try:
                n_trees = self.config.getint("RAND_FOREST", "n_estimators")
                criterion = self.config["RAND_FOREST"]["criterion"]
                max_depth = self.config.getint("RAND_FOREST", "max_depth")
                min_samples_leaf = self.config.getint("RAND_FOREST", "min_samples_leaf")
            except KeyError:
                self.log.error(traceback.format_exc())
                self.log.warning('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ config.ini')
                sys.exit(1)
         
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å        
        model = RandomForestRegressor(
            n_estimators=n_trees,
            criterion=criterion,
            max_depth=max_depth,
            min_samples_leaf=min_samples_leaf,
            random_state=42
        )
        
        # –û–±—É—á–µ–Ω–∏–µ    
        try:
            model.fit(self.X_train, self.y_train)
            self.log.info("–ú–æ–¥–µ–ª—å Random Forest –æ–±—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception:
            self.log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏")
            self.log.error(traceback.format_exc())
            sys.exit(1)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if predict:
            y_pred = model.predict(self.X_test)
            r2 = r2_score(self.y_test, y_pred)
            self.log.info(f"üìå R¬≤ Score: {r2:.4f}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã    
        params = {
            "n_estimators": n_trees,
            "criterion": criterion,
            "max_depth": max_depth,
            "min_samples_leaf": min_samples_leaf,
            "path": self.rand_forest_path
        }
        
        return self.save_model(model, self.rand_forest_path, "RAND_FOREST", params)

    def save_model(self, model, path: str, name: str, params: dict) -> bool:
        """
            –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ config.ini
        """
        self.config[name] = params
        # os.remove('config.ini')
        with open('config.ini', 'w') as configfile:
            self.config.write(configfile)
        with open(path, 'wb') as f:
            pickle.dump(model, f)

        self.log.info(f'–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {path}')
        
        return os.path.isfile(path)


if __name__ == "__main__":
    multi_model = ForestModel()
    multi_model.train_forest(use_config=False, predict=True)
