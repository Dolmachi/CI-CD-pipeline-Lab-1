pipeline {
    agent any

    environment {
        DOCKERHUB_CREDS = credentials('travissscottt-dockerhub')
    }

    options {
        timestamps()
        skipDefaultCheckout(true)
    }

    triggers {
        pollSCM('* * * * *')
    }

    stages {

        stage('Clone GitHub Repository') {
            steps {
                cleanWs()
                sh 'git clone -b master https://github.com/Dolmachi/CI-CD-pipeline-Lab-1.git'
            }
        }

        stage('Checkout Repo Dir') {
            steps {
                sh 'cd CI-CD-pipeline-Lab-1 && ls -lash'
            }
        }

        stage('Run Unit Tests') {
            steps {
                dir("CI-CD-pipeline-Lab-1") {
                    sh 'pytest --cov=src'
                }
            }
        }

        stage('Login to DockerHub') {
            steps {
                sh "docker login -u ${DOCKERHUB_CREDS_USR} -p ${DOCKERHUB_CREDS_PSW}"
            }
        }

        stage('Build and Run Docker Container') {
            steps {
                script {
                    try {
                        sh 'cd CI-CD-pipeline-Lab-1 && docker compose build'
                    } finally {
                        sh 'cd CI-CD-pipeline-Lab-1 && docker compose up -d'
                    }
                }
            }
        }

        stage('Check Container Logs') {
            steps {
                dir("CI-CD-pipeline-Lab-1") {
                    sh '''
                        container_id=$(docker ps -qf "name=api_container")
                        if [[ -z "$container_id" ]]; then
                            echo "No container running"
                            exit 1
                        fi
                        docker logs --tail 1000 -f "$container_id"
                    '''
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                sh 'docker push travissscottt/api_car_price:latest'
            }
        }
    }

    post {
        always {
            sh 'docker logout'
            cleanWs()
        }
    }
}
